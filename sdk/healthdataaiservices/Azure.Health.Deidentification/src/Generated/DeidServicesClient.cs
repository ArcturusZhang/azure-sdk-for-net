// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Health.Deidentification.Models;

namespace Azure.Health.Deidentification
{
    /// <summary></summary>
    public partial class DeidServicesClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://deid.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of DeidServicesClient for mocking. </summary>
        protected DeidServicesClient()
        {
        }

        /// <summary> Initializes a new instance of DeidServicesClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="tokenCredential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="tokenCredential"/> is null. </exception>
        public DeidServicesClient(Uri endpoint, TokenCredential tokenCredential) : this(endpoint, tokenCredential, new DeidServicesClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DeidServicesClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="tokenCredential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="tokenCredential"/> is null. </exception>
        public DeidServicesClient(Uri endpoint, TokenCredential tokenCredential, DeidServicesClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(tokenCredential, nameof(tokenCredential));

            options ??= new DeidServicesClientOptions();

            _endpoint = endpoint;
            _tokenCredential = tokenCredential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetJob(string name, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateGetJobRequest(name, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetJobAsync(string name, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateGetJobRequest(name, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<DeidentificationJob> GetJob(string name, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            Response result = GetJob(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((DeidentificationJob)result, result);
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<DeidentificationJob>> GetJobAsync(string name, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            Response result = await GetJobAsync(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((DeidentificationJob)result, result);
        }

        /// <summary>
        /// [Protocol Method] Long-running resource create or replace operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeidentifyDocuments(string name, RequestContent content, Guid? clientRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using HttpMessage message = CreateDeidentifyDocumentsRequest(name, content, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] Long-running resource create or replace operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeidentifyDocumentsAsync(string name, RequestContent content, Guid? clientRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(content, nameof(content));

            using HttpMessage message = CreateDeidentifyDocumentsRequest(name, content, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> Long-running resource create or replace operation template. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<DeidentificationJob> DeidentifyDocuments(string name, DeidentificationJob resource, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(resource, nameof(resource));

            Response result = DeidentifyDocuments(name, resource, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((DeidentificationJob)result, result);
        }

        /// <summary> Long-running resource create or replace operation template. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<DeidentificationJob>> DeidentifyDocumentsAsync(string name, DeidentificationJob resource, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(resource, nameof(resource));

            Response result = await DeidentifyDocumentsAsync(name, resource, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((DeidentificationJob)result, result);
        }

        /// <summary>
        /// [Protocol Method] Resource list operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ListJobs(int? maxpagesize, string continuationToken, Guid? clientRequestId, RequestContext context)
        {
            using HttpMessage message = CreateListJobsRequest(maxpagesize, continuationToken, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] Resource list operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ListJobsAsync(int? maxpagesize, string continuationToken, Guid? clientRequestId, RequestContext context)
        {
            using HttpMessage message = CreateListJobsRequest(maxpagesize, continuationToken, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> Resource list operation template. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PagedDeidentificationJob> ListJobs(int? maxpagesize = null, string continuationToken = null, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Response result = ListJobs(maxpagesize, continuationToken, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PagedDeidentificationJob)result, result);
        }

        /// <summary> Resource list operation template. </summary>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PagedDeidentificationJob>> ListJobsAsync(int? maxpagesize = null, string continuationToken = null, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Response result = await ListJobsAsync(maxpagesize, continuationToken, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PagedDeidentificationJob)result, result);
        }

        /// <summary>
        /// [Protocol Method] Resource list operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ListJobDocuments(string name, int? maxpagesize, string continuationToken, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateListJobDocumentsRequest(name, maxpagesize, continuationToken, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] Resource list operation template.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ListJobDocumentsAsync(string name, int? maxpagesize, string continuationToken, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateListJobDocumentsRequest(name, maxpagesize, continuationToken, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> Resource list operation template. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PagedDeidentificationDocumentDetails> ListJobDocuments(string name, int? maxpagesize = null, string continuationToken = null, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            Response result = ListJobDocuments(name, maxpagesize, continuationToken, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PagedDeidentificationDocumentDetails)result, result);
        }

        /// <summary> Resource list operation template. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="continuationToken"> Token to continue a previous query. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PagedDeidentificationDocumentDetails>> ListJobDocumentsAsync(string name, int? maxpagesize = null, string continuationToken = null, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            Response result = await ListJobDocumentsAsync(name, maxpagesize, continuationToken, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PagedDeidentificationDocumentDetails)result, result);
        }

        /// <summary>
        /// [Protocol Method] Cancels a job that is in progress. 
        /// 
        /// The job will be marked as canceled and the service will stop processing the job. The service will not delete any documents that have already been processed.
        /// 
        /// If the job is already complete, this will have no effect. 
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CancelJob(string name, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateCancelJobRequest(name, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] Cancels a job that is in progress. 
        /// 
        /// The job will be marked as canceled and the service will stop processing the job. The service will not delete any documents that have already been processed.
        /// 
        /// If the job is already complete, this will have no effect. 
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CancelJobAsync(string name, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateCancelJobRequest(name, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancels a job that is in progress. 
        /// 
        /// The job will be marked as canceled and the service will stop processing the job. The service will not delete any documents that have already been processed.
        /// 
        /// If the job is already complete, this will have no effect. 
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<DeidentificationJob> CancelJob(string name, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            Response result = CancelJob(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((DeidentificationJob)result, result);
        }

        /// <summary>
        /// Cancels a job that is in progress. 
        /// 
        /// The job will be marked as canceled and the service will stop processing the job. The service will not delete any documents that have already been processed.
        /// 
        /// If the job is already complete, this will have no effect. 
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<DeidentificationJob>> CancelJobAsync(string name, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            Response result = await CancelJobAsync(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((DeidentificationJob)result, result);
        }

        /// <summary>
        /// [Protocol Method] Removes the record of the job from the service. Does not delete any documents.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteJob(string name, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateDeleteJobRequest(name, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] Removes the record of the job from the service. Does not delete any documents.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteJobAsync(string name, Guid? clientRequestId, RequestContext context)
        {
            Argument.AssertNotNull(name, nameof(name));

            using HttpMessage message = CreateDeleteJobRequest(name, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> Removes the record of the job from the service. Does not delete any documents. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteJob(string name, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            return DeleteJob(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Removes the record of the job from the service. Does not delete any documents. </summary>
        /// <param name="name"> The name of a job. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteJobAsync(string name, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(name, nameof(name));

            return await DeleteJobAsync(name, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] A remote procedure call (RPC) operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeidentifyText(RequestContent content, Guid? clientRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using HttpMessage message = CreateDeidentifyTextRequest(content, clientRequestId, context);
            return Pipeline.ProcessMessage(message, context);
        }

        /// <summary>
        /// [Protocol Method] A remote procedure call (RPC) operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeidentifyTextAsync(RequestContent content, Guid? clientRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using HttpMessage message = CreateDeidentifyTextRequest(content, clientRequestId, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        /// <summary> A remote procedure call (RPC) operation. </summary>
        /// <param name="body"> Request body for de-identification operation. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<DeidentificationResult> DeidentifyText(DeidentificationContent body, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            Response result = DeidentifyText(body, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((DeidentificationResult)result, result);
        }

        /// <summary> A remote procedure call (RPC) operation. </summary>
        /// <param name="body"> Request body for de-identification operation. </param>
        /// <param name="clientRequestId"> An opaque, globally-unique, client-generated string identifier for the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<DeidentificationResult>> DeidentifyTextAsync(DeidentificationContent body, Guid? clientRequestId = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            Response result = await DeidentifyTextAsync(body, clientRequestId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((DeidentificationResult)result, result);
        }
    }
}
